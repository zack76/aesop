{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\n\nclass BaseService {\n  get(url, params = null) {\n    if (params) {\n      url += (url.indexOf('?') === -1 ? '?' : '&') + this.queryParams(params);\n    }\n\n    return fetch(url, {\n      method: 'GET',\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Allow': '*',\n        'Accept': 'application/json, text/plain, */*',\n        'Access-Control-Allow-Methods': '*',\n        \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\",\n        'Content-Type': 'application/json;charset=UTF-8'\n      }\n    });\n  }\n\n  queryParams(params) {\n    return Object.keys(params).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k])).join('&');\n  }\n\n}\n\nconst baseService = new BaseService();\nexport default baseService;","map":{"version":3,"sources":["/Users/Zac/Zack/aesop-test/aesop/src/service/BaseService.js"],"names":["fetch","BaseService","get","url","params","indexOf","queryParams","method","headers","Object","keys","map","k","encodeURIComponent","join","baseService"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,WAAN,CAAkB;AACdC,EAAAA,GAAG,CAACC,GAAD,EAAMC,MAAM,GAAG,IAAf,EAAqB;AACpB,QAAIA,MAAJ,EAAY;AACRD,MAAAA,GAAG,IAAI,CAACA,GAAG,CAACE,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,GAA0B,GAA1B,GAAgC,GAAjC,IAAwC,KAAKC,WAAL,CAAiBF,MAAjB,CAA/C;AACH;;AACD,WAAOJ,KAAK,CAACG,GAAD,EAAM;AACdI,MAAAA,MAAM,EAAE,KADM;AAEdC,MAAAA,OAAO,EAAE;AACL,uCAA+B,GAD1B;AAEL,iBAAS,GAFJ;AAGL,kBAAU,mCAHL;AAIL,wCAA+B,GAJ1B;AAKL,wCAAgC,gDAL3B;AAML,wBAAgB;AANX;AAFK,KAAN,CAAZ;AAWH;;AAEDF,EAAAA,WAAW,CAACF,MAAD,EAAS;AAChB,WAAOK,MAAM,CAACC,IAAP,CAAYN,MAAZ,EACFO,GADE,CACEC,CAAC,IAAIC,kBAAkB,CAACD,CAAD,CAAlB,GAAwB,GAAxB,GAA8BC,kBAAkB,CAACT,MAAM,CAACQ,CAAD,CAAP,CADvD,EAEFE,IAFE,CAEG,GAFH,CAAP;AAGH;;AAtBa;;AA0BlB,MAAMC,WAAW,GAAG,IAAId,WAAJ,EAApB;AACA,eAAec,WAAf","sourcesContent":["import fetch from 'isomorphic-unfetch'\n\nclass BaseService {\n    get(url, params = null) {\n        if (params) {\n            url += (url.indexOf('?') === -1 ? '?' : '&') + this.queryParams(params);\n        }\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'Allow': '*',\n                'Accept': 'application/json, text/plain, */*',\n                'Access-Control-Allow-Methods':'*',\n                \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\",\n                'Content-Type': 'application/json;charset=UTF-8',\n            }\n        });\n    }\n\n    queryParams(params) {\n        return Object.keys(params)\n            .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k]))\n            .join('&');\n    }\n\n}\n\nconst baseService = new BaseService();\nexport default baseService;\n"]},"metadata":{},"sourceType":"module"}